{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class QuizService {\n  constructor(http) {\n    this.http = http;\n    this.quizContent = [];\n    this.categoriesContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n    this.playerName = '';\n  }\n  checkAnswers() {\n    this.score = 0;\n    for (let i = 0; i < this.playerAnswers.length; i++) {\n      const question = this.quizContent.find(q => q.id === this.playerAnswers[i].questionId);\n      if (!question) continue;\n      for (let j = 0; j < question.answers.length; j++) {\n        const currentAnswer = question.answers[j];\n        if (currentAnswer.isCorrect && this.playerAnswers[i].answer === currentAnswer.answerLabel) {\n          this.score += 1;\n          break;\n        }\n      }\n    }\n    this.isQuizFinished = true;\n  }\n  addAnswer(answer, questionId) {\n    const isAnswered = this.playerAnswers.find(a => a.questionId === questionId);\n    if (isAnswered) {\n      isAnswered.answer = answer;\n      return;\n    }\n    this.playerAnswers.push({\n      questionId,\n      answer\n    });\n  }\n  /*   getQuizContent() {\n    this.http\n      .get('http://localhost:3000/questions')\n      .subscribe((questions: any) => {\n        for (const question of questions) {\n          this.http\n            .get(`http://localhost:3000/answers?questionId=${question.id}`)\n            .subscribe((answers: any) => {\n              this.quizContent.push({\n                id: question.id,\n                question: question.questionLabel,\n                answers,\n              });\n            });\n        }\n      });\n    } */\n  getQuizContent(idCategory) {\n    console.log(idCategory);\n    this.http.get('http://localhost:3000/questions').subscribe(questions => {\n      for (const question of questions) {\n        if (question.idCategory == idCategory) {\n          this.http.get(`http://localhost:3000/answers?questionId=${question.id}`).subscribe(answers => {\n            this.quizContent.push({\n              id: question.id,\n              question: question.questionLabel,\n              answers\n            });\n          });\n        }\n      }\n    });\n  }\n  getCategories() {\n    this.http.get('http://localhost:3000/categories').subscribe(categories => {\n      for (const category of categories) {\n        this.categoriesContent.push({\n          id: category.id,\n          label: category.categoryLabel\n        });\n      }\n    });\n  }\n  resetQuiz() {\n    this.quizContent = [];\n    this.categoriesContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n  }\n}\n_class = QuizService;\n_class.ɵfac = function QuizService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["QuizService","constructor","http","quizContent","categoriesContent","playerAnswers","score","isQuizFinished","playerName","checkAnswers","i","length","question","find","q","id","questionId","j","answers","currentAnswer","isCorrect","answer","answerLabel","addAnswer","isAnswered","a","push","getQuizContent","idCategory","console","log","get","subscribe","questions","questionLabel","getCategories","categories","category","label","categoryLabel","resetQuiz","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/nour/Documents/x-max-dev-deux/Angular-quizz-group/src/app/shared/services/quiz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizService {\n  quizContent: any[] = [];\n  categoriesContent: any[] = [];\n  playerAnswers: { questionId: number; answer: string }[] = [];\n  score = 0;\n  isQuizFinished = false;\n  playerName: string = '';\n\n  constructor(private http: HttpClient) {}\n\n  checkAnswers() {\n    this.score = 0;\n    for (let i = 0; i < this.playerAnswers.length; i++) {\n      const question = this.quizContent.find(\n        (q) => q.id === this.playerAnswers[i].questionId\n      );\n      if (!question) continue;\n      for (let j = 0; j < question.answers.length; j++) {\n        const currentAnswer = question.answers[j];\n        if (\n          currentAnswer.isCorrect &&\n          this.playerAnswers[i].answer === currentAnswer.answerLabel\n        ) {\n          this.score += 1;\n          break;\n        }\n      }\n    }\n    this.isQuizFinished = true;\n  }\n\n  addAnswer(answer: string, questionId: number) {\n    const isAnswered = this.playerAnswers.find(\n      (a) => a.questionId === questionId\n    );\n    if (isAnswered) {\n      isAnswered.answer = answer;\n      return;\n    }\n    this.playerAnswers.push({ questionId, answer });\n  }\n\n  /*   getQuizContent() {\n    this.http\n      .get('http://localhost:3000/questions')\n      .subscribe((questions: any) => {\n        for (const question of questions) {\n          this.http\n            .get(`http://localhost:3000/answers?questionId=${question.id}`)\n            .subscribe((answers: any) => {\n              this.quizContent.push({\n                id: question.id,\n                question: question.questionLabel,\n                answers,\n              });\n            });\n        }\n      });\n    } */\n  getQuizContent(idCategory: number) {\n    console.log(idCategory);\n    this.http\n      .get('http://localhost:3000/questions')\n      .subscribe((questions: any) => {\n        for (const question of questions) {\n          if (question.idCategory == idCategory) {\n            this.http\n              .get(`http://localhost:3000/answers?questionId=${question.id}`)\n              .subscribe((answers: any) => {\n                this.quizContent.push({\n                  id: question.id,\n                  question: question.questionLabel,\n                  answers,\n                });\n              });\n          }\n        }\n      });\n  }\n\n  getCategories() {\n    this.http\n      .get('http://localhost:3000/categories')\n      .subscribe((categories: any) => {\n        for (const category of categories) {\n          this.categoriesContent.push({\n            id: category.id,\n            label: category.categoryLabel,\n          });\n        }\n      });\n  }\n\n  resetQuiz() {\n    this.quizContent = [];\n    this.categoriesContent = [];\n    this.playerAnswers = [];\n    this.score = 0;\n    this.isQuizFinished = false;\n  }\n}\n"],"mappings":";;;AAMA,OAAM,MAAOA,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,WAAW,GAAU,EAAE;IACvB,KAAAC,iBAAiB,GAAU,EAAE;IAC7B,KAAAC,aAAa,GAA6C,EAAE;IAC5D,KAAAC,KAAK,GAAG,CAAC;IACT,KAAAC,cAAc,GAAG,KAAK;IACtB,KAAAC,UAAU,GAAW,EAAE;EAEgB;EAEvCC,YAAYA,CAAA;IACV,IAAI,CAACH,KAAK,GAAG,CAAC;IACd,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACL,aAAa,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;MAClD,MAAME,QAAQ,GAAG,IAAI,CAACT,WAAW,CAACU,IAAI,CACnCC,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAK,IAAI,CAACV,aAAa,CAACK,CAAC,CAAC,CAACM,UAAU,CACjD;MACD,IAAI,CAACJ,QAAQ,EAAE;MACf,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,OAAO,CAACP,MAAM,EAAEM,CAAC,EAAE,EAAE;QAChD,MAAME,aAAa,GAAGP,QAAQ,CAACM,OAAO,CAACD,CAAC,CAAC;QACzC,IACEE,aAAa,CAACC,SAAS,IACvB,IAAI,CAACf,aAAa,CAACK,CAAC,CAAC,CAACW,MAAM,KAAKF,aAAa,CAACG,WAAW,EAC1D;UACA,IAAI,CAAChB,KAAK,IAAI,CAAC;UACf;;;;IAIN,IAAI,CAACC,cAAc,GAAG,IAAI;EAC5B;EAEAgB,SAASA,CAACF,MAAc,EAAEL,UAAkB;IAC1C,MAAMQ,UAAU,GAAG,IAAI,CAACnB,aAAa,CAACQ,IAAI,CACvCY,CAAC,IAAKA,CAAC,CAACT,UAAU,KAAKA,UAAU,CACnC;IACD,IAAIQ,UAAU,EAAE;MACdA,UAAU,CAACH,MAAM,GAAGA,MAAM;MAC1B;;IAEF,IAAI,CAAChB,aAAa,CAACqB,IAAI,CAAC;MAAEV,UAAU;MAAEK;IAAM,CAAE,CAAC;EACjD;EAEA;;;;;;;;;;;;;;;;;EAiBAM,cAAcA,CAACC,UAAkB;IAC/BC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;IACvB,IAAI,CAAC1B,IAAI,CACN6B,GAAG,CAAC,iCAAiC,CAAC,CACtCC,SAAS,CAAEC,SAAc,IAAI;MAC5B,KAAK,MAAMrB,QAAQ,IAAIqB,SAAS,EAAE;QAChC,IAAIrB,QAAQ,CAACgB,UAAU,IAAIA,UAAU,EAAE;UACrC,IAAI,CAAC1B,IAAI,CACN6B,GAAG,CAAC,4CAA4CnB,QAAQ,CAACG,EAAE,EAAE,CAAC,CAC9DiB,SAAS,CAAEd,OAAY,IAAI;YAC1B,IAAI,CAACf,WAAW,CAACuB,IAAI,CAAC;cACpBX,EAAE,EAAEH,QAAQ,CAACG,EAAE;cACfH,QAAQ,EAAEA,QAAQ,CAACsB,aAAa;cAChChB;aACD,CAAC;UACJ,CAAC,CAAC;;;IAGV,CAAC,CAAC;EACN;EAEAiB,aAAaA,CAAA;IACX,IAAI,CAACjC,IAAI,CACN6B,GAAG,CAAC,kCAAkC,CAAC,CACvCC,SAAS,CAAEI,UAAe,IAAI;MAC7B,KAAK,MAAMC,QAAQ,IAAID,UAAU,EAAE;QACjC,IAAI,CAAChC,iBAAiB,CAACsB,IAAI,CAAC;UAC1BX,EAAE,EAAEsB,QAAQ,CAACtB,EAAE;UACfuB,KAAK,EAAED,QAAQ,CAACE;SACjB,CAAC;;IAEN,CAAC,CAAC;EACN;EAEAC,SAASA,CAAA;IACP,IAAI,CAACrC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,KAAK,GAAG,CAAC;IACd,IAAI,CAACC,cAAc,GAAG,KAAK;EAC7B;;SAnGWP,WAAW;;mBAAXA,MAAW,EAAAyC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAX5C,MAAW;EAAA6C,OAAA,EAAX7C,MAAW,CAAA8C,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}